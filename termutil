#!/bin/bash

BOX_NW=$'\u250C'
BOX_NE=$'\u2510'
BOX_SW=$'\u2514'
BOX_SE=$'\u2518'
BOX_HO=$'\u2500'
BOX_VE=$'\u2502'

get-date()
{
    date +"%H:%M:%S %Z %a %d/%m/%Y"
}

bar()
{
    local bar_char
    if [ "$#" -eq 2 ]; then
	bar_char="$2"
    else
	bar_char="$BOX_HO"
    fi

    for ((i=0; i<${#1}; i++)); do
        printf "%s" "$bar_char"
    done
}

february-days()
{
    year=$(date +%Y)
    if (( (year % 4 == 0 && year % 100 != 0) || year % 400 == 0 )); then
        echo "29"
    else
        echo "28"
    fi
}

days-in-month()
{
    local days
    case $1 in
    01|03|05|07|08|10|12) days=31 ;;
    04|06|09|11)          days=30 ;;
    02)                   days=28 ;;
    *)                    days=$(february-days) ;;
    esac
    echo $days
}

first-of-month()
{
    date -d "$(date +%Y)-$1-01" +%u
}

agenda()
{
    local cat_cmd="sort -n"
    if [ "$#" -ne 0 ]; then
        if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
            echo "usage: agenda [-e | --edit-config <editor>] [-h | --help] [-n | --no-sort]"
            return
        elif [ "$1" = "-n" ] || [ "$1" = "--no-sort" ]; then
            cat_cmd="cat"
        elif [ "$1" = "-e" ] || [ "$1" = "--edit-config" ]; then
            if [ "$#" -ne 1 ]; then
                $2 ~/.calendar
            else
                vi ~/.calendar
            fi
        fi
    fi
    if $use_agenda && ! [ -f ~/.calendar ]; then
        touch ~/.calendar
    fi
    local today="$(date +"%d/%m/%Y" | sed 's/[\/&]/\\&/g'):"
    local green="\x1b[32m"
    local invert="\x1b[7m"
    local reset="\x1b[0m"
    $cat_cmd ~/.calendar | sed "s/${today}/$green&$reset/" | sed -E "s/^([^:]*)./$invert&$reset/"
}

calendar()
{
    local use_agenda=false
    local cur_date
    local calendar_date_str="%m %_B %Y %-d"
    if [ "$#" -eq 0 ]; then
        cur_date="$(date +"$calendar_date_str")"
    else
        if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
            echo "usage: calendar [-a | --use-agenda] [-d | --date-format] [-h | --help] [date-alternative]"
            echo "  date-alternative : supplied as from \"date +\$(calendar --date-format)\""
            echo "          GNU - \"calendar \"\$(date -d \"+2 months\" +\"\$(calendar -d)\")\""
            echo "    BSD/macOS - \"calendar \"\$(date -v +1m +\"\$(calendar -d)\")\""
            echo "* only specify one of the following flags"
	    echo "   --use-agenda : highlight days with agenda items specified in ~/.calendar"
            echo "  --date-format : prints default format string to be passed to \"date\""
            echo "         --help : print this message"
            return
        elif [ "$1" = "-d" ] || [ "$1" = "--date-format" ]; then
            echo "$calendar_date_str"
            return
        elif [ "$1" = "-a" ] || [ "$1" = "--use-agenda" ]; then
            use_agenda=true
            cur_date="$(date +"$calendar_date_str")"
        else
            cur_date="$1"
        fi
    fi
    local cur_month=$(echo "$cur_date" | awk '{print $1}')
    local cur_month_name=$(echo "$cur_date" | awk '{print $2}')
    local cur_year=$(echo "$cur_date" | awk '{print $3}')
    local today=$(echo "$cur_date" | awk '{print $4}')
    local fotm=$(first-of-month $cur_month)
    local days=$(($(days-in-month $cur_month)+$fotm))

    if $use_agenda && ! [ -f ~/.calendar ]; then
        touch ~/.calendar
    fi

    printf "    %9s\n" "$cur_month_name $cur_year"
    echo "--------------------"
    echo " S  M  T  W  T  F  S"

    local start
    local day_calc
    if [ $fotm -eq 7 ]; then
        start=8
    else
        start=1
    fi
    for ((d=$start; d<=$days; d++)); do
        if [ $d -le $fotm ]; then
            printf "  "
        else
            day_calc="$(($d-$fotm))" 
            date_calc="$(printf "%02d" "$day_calc")/$cur_month/$cur_year"
            if [ $day_calc -eq $today ] && $use_agenda && grep -q "$date_calc" ~/.calendar; then
	        printf "\033[32;7m%2d\033[0m" "$day_calc" 
            elif [ $day_calc -eq $today ]; then
	        printf "\033[32m%2d\033[0m" "$day_calc" 
            elif $use_agenda && grep -q "$date_calc" ~/.calendar; then
	        printf "\033[7m%2d\033[0m" "$day_calc" 
            else
	        printf "%2d" "$day_calc" 
            fi
        fi
        if [ $d -eq $days ]; then
            break
        fi
        if [ $(($d%7)) -eq 0 ]; then
            printf "\n"
        else
            printf " "
        fi
    done
    printf "\n"
}

longest-line()
{
    awk '{
        gsub(/^[ \t]+|[ \t]+$/, "", $0)
        gsub(/\033\[[0-9;]*m/, "", $0)
        if (length($0) > max_length)
        {
            max_length = length($0)
            longest_line = $0
        }
    } END {
        print longest_line
    }'
}

box()
{
    temp="$1.tmp"
    cat "$@" >"$temp"
    longest_line=$(cat "$temp" | longest-line)
    echo "$BOX_NW$BOX_HO$(bar "$longest_line")$BOX_HO$BOX_NE"
    line_box="$BOX_VE $(bar "$longest_line" " ") $BOX_VE"
    line_undo="$(bar "  $longest_line" $'\b')"
    awk -v v1="$line_box" -v v2="$line_undo" '{printf "%s%s%s\n", v1, v2, $0 }' "$temp"
    echo "$BOX_SW$BOX_HO$(bar "$longest_line")$BOX_HO$BOX_SE"
    rm "$temp"
}

draw-hud()
{
    clear
    get-date | box
    calendar -a | box
    agenda | box
}

hud()
{
    stty -echo
    printf "\033[?25l"

    draw-hud

    local last_d=$(date +%d)
    while true
    do
        read -t 0.1 -n 1 key
        if [[ $key ]]; then
            clear
            stty echo
            printf "\033[?25h"
            break
        fi

        printf "\033[2;3H$(get-date)"
        if [ "$(date +%d)" -ne "$last_d" ]; then
            draw-hud
	fi
        last_d=$(date +%d)
        sleep 0.1
    done
    printf "\033[?25h"
}
